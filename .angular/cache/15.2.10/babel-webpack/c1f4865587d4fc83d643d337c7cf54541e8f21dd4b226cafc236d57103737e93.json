{"ast":null,"code":"import * as i1$1 from '@angular/animations';\nimport { animate, style } from '@angular/animations';\nimport { ListKeyManager } from '@angular/cdk/a11y';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { TemplateRef, Component, Input, ViewChild, EventEmitter, PLATFORM_ID, Inject, Output, ContentChildren, HostListener, Injectable, NgModule } from '@angular/core';\nimport { Subject, BehaviorSubject, interval } from 'rxjs';\nimport { takeUntil, filter } from 'rxjs/operators';\nimport * as i1 from '@angular/platform-browser';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG, HammerModule } from '@angular/platform-browser';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i4 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nfunction MatCarouselSlideComponent_ng_template_0_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 3);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"background-color\", ctx_r1.overlayColor);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.ariaLabel);\n  }\n}\nfunction MatCarouselSlideComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, MatCarouselSlideComponent_ng_template_0_div_3_Template, 1, 3, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-image\", ctx_r0.image);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.hideOverlay);\n  }\n}\nconst _c0$1 = [\"*\"];\nlet MatCarouselSlideComponent = /*#__PURE__*/(() => {\n  class MatCarouselSlideComponent {\n    constructor(sanitizer) {\n      this.sanitizer = sanitizer;\n      this.overlayColor = '#00000040';\n      this.hideOverlay = false;\n      this.ariaLabel = '';\n      this.disabled = false; // implements ListKeyManagerOption\n      this.load = false;\n    }\n    ngOnInit() {\n      if (this.image) {\n        this.image = this.sanitizer.bypassSecurityTrustStyle(`url(\"${this.image}\")`);\n      }\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */MatCarouselSlideComponent.ɵfac = function MatCarouselSlideComponent_Factory(t) {\n    return new (t || MatCarouselSlideComponent)(i0.ɵɵdirectiveInject(i1.DomSanitizer));\n  };\n  MatCarouselSlideComponent.ɵcmp = /** @pureOrBreakMyCode */i0.ɵɵdefineComponent({\n    type: MatCarouselSlideComponent,\n    selectors: [[\"mat-carousel-slide\"]],\n    viewQuery: function MatCarouselSlideComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TemplateRef, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n      }\n    },\n    inputs: {\n      image: \"image\",\n      overlayColor: \"overlayColor\",\n      hideOverlay: \"hideOverlay\",\n      ariaLabel: \"ariaLabel\",\n      disabled: \"disabled\",\n      load: \"load\"\n    },\n    ngContentSelectors: _c0$1,\n    decls: 1,\n    vars: 0,\n    consts: [[1, \"carousel-slide\"], [1, \"carousel-slide-content\"], [\"class\", \"carousel-slide-overlay\", 3, \"background-color\", 4, \"ngIf\"], [1, \"carousel-slide-overlay\"]],\n    template: function MatCarouselSlideComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, MatCarouselSlideComponent_ng_template_0_Template, 4, 3, \"ng-template\");\n      }\n    },\n    dependencies: [i2.NgIf],\n    styles: [\".carousel-slide[_ngcontent-%COMP%]{width:100%;height:100%;position:absolute;z-index:auto;background-size:cover;background-repeat:no-repeat;background-position:center}.carousel-slide-overlay[_ngcontent-%COMP%]{width:100%;height:100%;position:absolute;z-index:auto}.carousel-slide-content[_ngcontent-%COMP%]{width:100%;height:100%;position:absolute;z-index:1}\"]\n  });\n  return MatCarouselSlideComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst _c0 = [\"carouselContainer\"];\nconst _c1 = [\"carouselList\"];\nfunction MatCarouselComponent_li_4_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 11);\n  }\n  if (rf & 2) {\n    const slide_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"ngTemplateOutlet\", slide_r6.templateRef);\n  }\n}\nfunction MatCarouselComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 8, 9);\n    i0.ɵɵlistener(\"panleft\", function MatCarouselComponent_li_4_Template_li_panleft_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const _r7 = i0.ɵɵreference(1);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onPan($event, _r7));\n    })(\"panright\", function MatCarouselComponent_li_4_Template_li_panright_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const _r7 = i0.ɵɵreference(1);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onPan($event, _r7));\n    })(\"panend\", function MatCarouselComponent_li_4_Template_li_panend_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const _r7 = i0.ɵɵreference(1);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.onPanEnd($event, _r7));\n    })(\"pancancel\", function MatCarouselComponent_li_4_Template_li_pancancel_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const _r7 = i0.ɵɵreference(1);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.onPanEnd($event, _r7));\n    });\n    i0.ɵɵtemplate(2, MatCarouselComponent_li_4_ng_container_2_Template, 1, 1, \"ng-container\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const slide_r6 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"padding-bottom\", ctx_r2.maintainAspectRatio && ctx_r2.proportion ? ctx_r2.proportion + \"%\" : \"0px\")(\"height\", !ctx_r2.maintainAspectRatio && ctx_r2.slideHeight ? ctx_r2.slideHeight : \"0px\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", slide_r6.load);\n  }\n}\nfunction MatCarouselComponent_button_5_mat_icon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-icon\", 15);\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"svgIcon\", ctx_r15.svgIconOverrides.arrowBack);\n  }\n}\nfunction MatCarouselComponent_button_5_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\");\n    i0.ɵɵtext(1, \"arrow_back\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatCarouselComponent_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function MatCarouselComponent_button_5_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.previous());\n    });\n    i0.ɵɵtemplate(1, MatCarouselComponent_button_5_mat_icon_1_Template, 1, 1, \"mat-icon\", 13);\n    i0.ɵɵtemplate(2, MatCarouselComponent_button_5_ng_template_2_Template, 2, 0, \"ng-template\", null, 14, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r16 = i0.ɵɵreference(3);\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r3.color)(\"disabled\", !ctx_r3.loop && ctx_r3.currentIndex == 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.svgIconOverrides == null ? null : ctx_r3.svgIconOverrides.arrowBack)(\"ngIfElse\", _r16);\n  }\n}\nfunction MatCarouselComponent_button_6_mat_icon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-icon\", 15);\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"svgIcon\", ctx_r20.svgIconOverrides.arrowForward);\n  }\n}\nfunction MatCarouselComponent_button_6_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\");\n    i0.ɵɵtext(1, \"arrow_forward\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MatCarouselComponent_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function MatCarouselComponent_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.next());\n    });\n    i0.ɵɵtemplate(1, MatCarouselComponent_button_6_mat_icon_1_Template, 1, 1, \"mat-icon\", 13);\n    i0.ɵɵtemplate(2, MatCarouselComponent_button_6_ng_template_2_Template, 2, 0, \"ng-template\", null, 17, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r21 = i0.ɵɵreference(3);\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r4.color)(\"disabled\", !ctx_r4.loop && ctx_r4.currentIndex == ctx_r4.slidesList.length - 1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.svgIconOverrides == null ? null : ctx_r4.svgIconOverrides.arrowForward)(\"ngIfElse\", _r21);\n  }\n}\nfunction MatCarouselComponent_div_7_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function MatCarouselComponent_div_7_button_1_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r29);\n      const i_r27 = restoredCtx.index;\n      const ctx_r28 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r28.slideTo(i_r27));\n    })(\"focus\", function MatCarouselComponent_div_7_button_1_Template_button_focus_0_listener() {\n      i0.ɵɵrestoreView(_r29);\n      i0.ɵɵnextContext(2);\n      const _r0 = i0.ɵɵreference(1);\n      return i0.ɵɵresetView(_r0.focus());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r27 = ctx.index;\n    const ctx_r25 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"color\", ctx_r25.color)(\"disabled\", i_r27 == ctx_r25.currentIndex);\n    i0.ɵɵattribute(\"aria-label\", \"Slide #\" + i_r27);\n  }\n}\nfunction MatCarouselComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, MatCarouselComponent_div_7_button_1_Template, 1, 3, \"button\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"flex-direction\", ctx_r5.orientation === \"rtl\" ? \"row-reverse\" : \"row\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.slidesList);\n  }\n}\nvar Direction = /*#__PURE__*/(() => {\n  (function (Direction) {\n    Direction[Direction[\"left\"] = 0] = \"left\";\n    Direction[Direction[\"right\"] = 1] = \"right\";\n    Direction[Direction[\"index\"] = 2] = \"index\";\n  })(Direction || (Direction = {}));\n  return Direction;\n})();\nlet MatCarouselComponent = /*#__PURE__*/(() => {\n  class MatCarouselComponent {\n    set autoplay(value) {\n      this.autoplay$.next(value);\n      this._autoplay = value;\n    }\n    set interval(value) {\n      this.interval$.next(value);\n    }\n    get loop() {\n      return this._loop;\n    }\n    set loop(value) {\n      this.loop$.next(value);\n      this._loop = value;\n    }\n    get maxWidth() {\n      return this._maxWidth;\n    }\n    set maxWidth(value) {\n      this._maxWidth = value;\n      this.maxWidth$.next();\n    }\n    set slides(value) {\n      this.slides$.next(value);\n    }\n    get orientation() {\n      return this._orientation;\n    }\n    set orientation(value) {\n      this.orientation$.next(value);\n      this._orientation = value;\n    }\n    get currentIndex() {\n      if (this.listKeyManager) {\n        return this.listKeyManager.activeItemIndex;\n      }\n      return 0;\n    }\n    get currentSlide() {\n      if (this.listKeyManager) {\n        return this.listKeyManager.activeItem;\n      }\n      return null;\n    }\n    constructor(animationBuilder, renderer, platformId) {\n      this.animationBuilder = animationBuilder;\n      this.renderer = renderer;\n      this.platformId = platformId;\n      this.timings = '250ms ease-in';\n      this.lazyLoad = false;\n      this.hideArrows = true;\n      this.hideIndicators = true;\n      this.ariaLabel = 'Sliding carousel';\n      this.color = 'accent';\n      this.maintainAspectRatio = true;\n      this.proportion = 25;\n      this.slideHeight = '100%';\n      this.useKeyboard = false;\n      this.useMouseWheel = false;\n      this.changeEmitter = new EventEmitter();\n      this._autoplay = true;\n      this.autoplay$ = new Subject();\n      this.interval$ = new BehaviorSubject(5000);\n      this.slides$ = new BehaviorSubject(null);\n      this._maxWidth = 'auto';\n      this.maxWidth$ = new Subject();\n      this._loop = true;\n      this.loop$ = new Subject();\n      this._orientation = 'ltr';\n      this.orientation$ = new Subject();\n      this.timerStop$ = new Subject();\n      this.destroy$ = new Subject();\n      this.playing = false;\n    }\n    onKeyUp(event) {\n      if (this.useKeyboard && !this.playing) {\n        this.listKeyManager.onKeydown(event);\n      }\n    }\n    onMouseEnter() {\n      this.stopTimer();\n    }\n    onMouseLeave() {\n      this.startTimer(this._autoplay);\n    }\n    onMouseWheel(event) {\n      if (this.useMouseWheel) {\n        event.preventDefault(); // prevent window to scroll\n        const deltaY = Math.sign(event.deltaY);\n        if (deltaY > 0) {\n          this.next();\n        } else if (deltaY < 0) {\n          this.previous();\n        }\n      }\n    }\n    onResize(event) {\n      // Reset carousel when width is resized\n      // in order to avoid major glitches.\n      const w = this.getWidth();\n      if (w !== this.width) {\n        this.width = w;\n        this.slideTo(0);\n      }\n    }\n    ngAfterContentInit() {\n      if (!this.lazyLoad) {\n        this.slidesList.forEach(slide => slide.load = true);\n      } else {\n        this.slidesList.first.load = true;\n        setTimeout(() => {\n          this.slidesList.find((s, i) => i === 1 % this.slidesList.length).load = true;\n          this.slidesList.find((s, i) => i === (this.slidesList.length - 1) % this.slidesList.length).load = true;\n        }, this.interval$.getValue() / 2);\n      }\n      this.listKeyManager = new ListKeyManager(this.slidesList).withVerticalOrientation(false).withHorizontalOrientation(this._orientation).withWrap(this._loop);\n      this.listKeyManager.updateActiveItem(0);\n      this.listKeyManager.change.pipe(takeUntil(this.destroy$)).subscribe(() => this.playAnimation());\n    }\n    ngAfterViewInit() {\n      this.width = this.getWidth();\n      this.autoplay$.pipe(takeUntil(this.destroy$)).subscribe(value => {\n        this.stopTimer();\n        this.startTimer(value);\n      });\n      this.interval$.pipe(takeUntil(this.destroy$)).subscribe(value => {\n        this.stopTimer();\n        this.resetTimer(value);\n        this.startTimer(this._autoplay);\n      });\n      this.maxWidth$.pipe(takeUntil(this.destroy$)).subscribe(() => this.slideTo(0));\n      this.loop$.pipe(takeUntil(this.destroy$)).subscribe(value => this.listKeyManager.withWrap(value));\n      this.orientation$.pipe(takeUntil(this.destroy$)).subscribe(value => this.listKeyManager.withHorizontalOrientation(value));\n      this.slides$.pipe(takeUntil(this.destroy$), filter(value => value && value < this.slidesList.length)).subscribe(value => this.resetSlides(value));\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    next() {\n      this.goto(Direction.right);\n    }\n    previous() {\n      this.goto(Direction.left);\n    }\n    slideTo(index) {\n      this.goto(Direction.index, index);\n    }\n    onPan(event, slideElem) {\n      // https://github.com/angular/angular/issues/10541#issuecomment-346539242\n      // if y velocity is greater, it's a panup/pandown, so ignore.\n      if (Math.abs(event.velocityY) > Math.abs(event.velocityX)) {\n        return;\n      }\n      let deltaX = event.deltaX;\n      if (this.isOutOfBounds()) {\n        deltaX *= 0.2; // decelerate movement;\n      }\n\n      this.renderer.setStyle(slideElem, 'cursor', 'grabbing');\n      this.renderer.setStyle(this.carouselList.nativeElement, 'transform', this.getTranslation(this.getOffset() + deltaX));\n    }\n    onPanEnd(event, slideElem) {\n      this.renderer.removeStyle(slideElem, 'cursor');\n      if (!this.isOutOfBounds() && Math.abs(event.deltaX) > this.getWidth() * 0.25) {\n        if (event.deltaX <= 0) {\n          this.next();\n          return;\n        }\n        this.previous();\n        return;\n      }\n      this.playAnimation(); // slide back, don't change current index\n    }\n\n    isOutOfBounds() {\n      const sign = this.orientation === 'rtl' ? -1 : 1;\n      const left = sign * (this.carouselList.nativeElement.getBoundingClientRect().left - this.carouselList.nativeElement.offsetParent.getBoundingClientRect().left);\n      const lastIndex = this.slidesList.length - 1;\n      const width = -this.getWidth() * lastIndex;\n      return this.listKeyManager.activeItemIndex === 0 && left >= 0 || this.listKeyManager.activeItemIndex === lastIndex && left <= width;\n    }\n    isVisible() {\n      if (!isPlatformBrowser(this.platformId)) {\n        return false;\n      }\n      const elem = this.carouselContainer.nativeElement;\n      const docViewTop = window.pageYOffset;\n      const docViewBottom = docViewTop + window.innerHeight;\n      const elemOffset = elem.getBoundingClientRect();\n      const elemTop = docViewTop + elemOffset.top;\n      const elemBottom = elemTop + elemOffset.height;\n      return elemBottom <= docViewBottom || elemTop >= docViewTop;\n    }\n    getOffset() {\n      const offset = this.listKeyManager.activeItemIndex * this.getWidth();\n      const sign = this.orientation === 'rtl' ? 1 : -1;\n      return sign * offset;\n    }\n    getTranslation(offset) {\n      return `translateX(${offset}px)`;\n    }\n    getWidth() {\n      return this.carouselContainer.nativeElement.clientWidth;\n    }\n    goto(direction, index) {\n      if (!this.playing) {\n        const rtl = this.orientation === 'rtl';\n        switch (direction) {\n          case Direction.left:\n            return rtl ? this.listKeyManager.setNextItemActive() : this.listKeyManager.setPreviousItemActive();\n          case Direction.right:\n            return rtl ? this.listKeyManager.setPreviousItemActive() : this.listKeyManager.setNextItemActive();\n          case Direction.index:\n            return this.listKeyManager.setActiveItem(index);\n        }\n      }\n    }\n    playAnimation() {\n      const translation = this.getTranslation(this.getOffset());\n      const factory = this.animationBuilder.build(animate(this.timings, style({\n        transform: translation\n      })));\n      const animation = factory.create(this.carouselList.nativeElement);\n      animation.onStart(() => {\n        this.playing = true;\n      });\n      animation.onDone(() => {\n        this.changeEmitter.emit(this.currentIndex);\n        this.playing = false;\n        if (this.lazyLoad) {\n          this.slidesList.find((s, i) => i === (this.currentIndex + 1) % this.slidesList.length).load = true;\n          this.slidesList.find((s, i) => i === (this.currentIndex - 1 + this.slidesList.length) % this.slidesList.length).load = true;\n          this.slidesList.find((s, i) => i === this.currentIndex).load = true;\n        }\n        this.renderer.setStyle(this.carouselList.nativeElement, 'transform', translation);\n        animation.destroy();\n      });\n      animation.play();\n    }\n    resetSlides(slides) {\n      this.slidesList.reset(this.slidesList.toArray().slice(0, slides));\n    }\n    resetTimer(value) {\n      this.timer$ = interval(value);\n    }\n    startTimer(autoplay) {\n      if (!autoplay) {\n        return;\n      }\n      this.timer$.pipe(takeUntil(this.timerStop$), takeUntil(this.destroy$), filter(() => this.isVisible())).subscribe(() => {\n        this.listKeyManager.withWrap(true).setNextItemActive();\n        this.listKeyManager.withWrap(this.loop);\n      });\n    }\n    stopTimer() {\n      this.timerStop$.next();\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */MatCarouselComponent.ɵfac = function MatCarouselComponent_Factory(t) {\n    return new (t || MatCarouselComponent)(i0.ɵɵdirectiveInject(i1$1.AnimationBuilder), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  MatCarouselComponent.ɵcmp = /** @pureOrBreakMyCode */i0.ɵɵdefineComponent({\n    type: MatCarouselComponent,\n    selectors: [[\"mat-carousel\"]],\n    contentQueries: function MatCarouselComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MatCarouselSlideComponent, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.slidesList = _t);\n      }\n    },\n    viewQuery: function MatCarouselComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.carouselContainer = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.carouselList = _t.first);\n      }\n    },\n    hostBindings: function MatCarouselComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keyup\", function MatCarouselComponent_keyup_HostBindingHandler($event) {\n          return ctx.onKeyUp($event);\n        })(\"mouseenter\", function MatCarouselComponent_mouseenter_HostBindingHandler() {\n          return ctx.onMouseEnter();\n        })(\"mouseleave\", function MatCarouselComponent_mouseleave_HostBindingHandler() {\n          return ctx.onMouseLeave();\n        })(\"mousewheel\", function MatCarouselComponent_mousewheel_HostBindingHandler($event) {\n          return ctx.onMouseWheel($event);\n        })(\"resize\", function MatCarouselComponent_resize_HostBindingHandler($event) {\n          return ctx.onResize($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    inputs: {\n      timings: \"timings\",\n      lazyLoad: \"lazyLoad\",\n      svgIconOverrides: \"svgIconOverrides\",\n      autoplay: \"autoplay\",\n      interval: \"interval\",\n      loop: \"loop\",\n      hideArrows: \"hideArrows\",\n      hideIndicators: \"hideIndicators\",\n      ariaLabel: \"ariaLabel\",\n      color: \"color\",\n      maxWidth: \"maxWidth\",\n      maintainAspectRatio: \"maintainAspectRatio\",\n      proportion: \"proportion\",\n      slideHeight: \"slideHeight\",\n      slides: \"slides\",\n      useKeyboard: \"useKeyboard\",\n      useMouseWheel: \"useMouseWheel\",\n      orientation: \"orientation\"\n    },\n    outputs: {\n      changeEmitter: \"changeEmitter\"\n    },\n    decls: 8,\n    vars: 13,\n    consts: [[\"tabindex\", \"0\", 1, \"carousel\"], [\"carouselContainer\", \"\"], [\"role\", \"listbox\", 1, \"carousel-list\"], [\"carouselList\", \"\"], [\"class\", \"carousel-slide\", \"role\", \"option\", 3, \"padding-bottom\", \"height\", \"panleft\", \"panright\", \"panend\", \"pancancel\", 4, \"ngFor\", \"ngForOf\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"tabindex\", \"-1\", \"aria-label\", \"Previous slide\", 3, \"color\", \"disabled\", \"click\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"tabindex\", \"-1\", \"aria-label\", \"Next slide\", 3, \"color\", \"disabled\", \"click\", 4, \"ngIf\"], [\"class\", \"carousel-indicators\", \"tabindex\", \"-1\", 3, \"flex-direction\", 4, \"ngIf\"], [\"role\", \"option\", 1, \"carousel-slide\", 3, \"panleft\", \"panright\", \"panend\", \"pancancel\"], [\"carouselSlide\", \"\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"tabindex\", \"-1\", \"aria-label\", \"Previous slide\", 3, \"color\", \"disabled\", \"click\"], [3, \"svgIcon\", 4, \"ngIf\", \"ngIfElse\"], [\"defaultArrowBack\", \"\"], [3, \"svgIcon\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"tabindex\", \"-1\", \"aria-label\", \"Next slide\", 3, \"color\", \"disabled\", \"click\"], [\"defaultArrowForward\", \"\"], [\"tabindex\", \"-1\", 1, \"carousel-indicators\"], [\"type\", \"button\", \"tabindex\", \"-1\", \"mat-mini-fab\", \"\", 3, \"color\", \"disabled\", \"click\", \"focus\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", \"tabindex\", \"-1\", \"mat-mini-fab\", \"\", 3, \"color\", \"disabled\", \"click\", \"focus\"]],\n    template: function MatCarouselComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"ul\", 2, 3);\n        i0.ɵɵtemplate(4, MatCarouselComponent_li_4_Template, 3, 5, \"li\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, MatCarouselComponent_button_5_Template, 4, 4, \"button\", 5);\n        i0.ɵɵtemplate(6, MatCarouselComponent_button_6_Template, 4, 4, \"button\", 6);\n        i0.ɵɵtemplate(7, MatCarouselComponent_div_7_Template, 2, 3, \"div\", 7);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"max-width\", ctx.maxWidth)(\"height\", !ctx.maintainAspectRatio ? \"100%\" : \"auto\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵstyleProp(\"flex-direction\", ctx.orientation === \"rtl\" ? \"row-reverse\" : \"row\")(\"height\", !ctx.maintainAspectRatio ? \"100%\" : \"auto\");\n        i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.slidesList);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.hideArrows);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.hideArrows);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.hideIndicators);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i2.NgTemplateOutlet, i3.MatIconButton, i3.MatMiniFabButton, i4.MatIcon],\n    styles: [\".carousel[_ngcontent-%COMP%]{width:100%;position:relative;overflow:hidden;outline:none}.carousel[_ngcontent-%COMP%] > button[_ngcontent-%COMP%]{position:absolute;z-index:1;top:50%;transform:translateY(-50%)}.carousel[_ngcontent-%COMP%] > button[_ngcontent-%COMP%]:first-of-type{left:30px}.carousel[_ngcontent-%COMP%] > button[_ngcontent-%COMP%]:last-of-type{right:30px}.carousel-list[_ngcontent-%COMP%]{width:100%;margin:0;padding:0;list-style:none;display:flex;position:relative}.carousel-slide[_ngcontent-%COMP%]{width:100%;height:0;display:flex;flex-shrink:0;position:relative}.carousel-slide[_ngcontent-%COMP%]:hover{cursor:grab}.carousel-indicators[_ngcontent-%COMP%]{display:flex;position:absolute;bottom:15px;z-index:1;left:50%;transform:translate(-50%);outline:none}.carousel-indicators[_ngcontent-%COMP%] > button[_ngcontent-%COMP%]{width:10px;height:10px;margin:7.5px}\"]\n  });\n  return MatCarouselComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatCarouselHammerConfig = /*#__PURE__*/(() => {\n  class MatCarouselHammerConfig extends HammerGestureConfig {\n    constructor() {\n      super(...arguments);\n      this.overrides = {\n        pinch: {\n          enable: false\n        },\n        rotate: {\n          enable: false\n        }\n      };\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */MatCarouselHammerConfig.ɵfac = /** @pureOrBreakMyCode */function () {\n    let ɵMatCarouselHammerConfig_BaseFactory;\n    return function MatCarouselHammerConfig_Factory(t) {\n      return (ɵMatCarouselHammerConfig_BaseFactory || (ɵMatCarouselHammerConfig_BaseFactory = i0.ɵɵgetInheritedFactory(MatCarouselHammerConfig)))(t || MatCarouselHammerConfig);\n    };\n  }();\n  MatCarouselHammerConfig.ɵprov = /** @pureOrBreakMyCode */i0.ɵɵdefineInjectable({\n    token: MatCarouselHammerConfig,\n    factory: MatCarouselHammerConfig.ɵfac\n  });\n  return MatCarouselHammerConfig;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatCarouselModule = /*#__PURE__*/(() => {\n  class MatCarouselModule {\n    static forRoot() {\n      return {\n        ngModule: MatCarouselModule,\n        providers: [{\n          provide: HAMMER_GESTURE_CONFIG,\n          useClass: MatCarouselHammerConfig\n        }]\n      };\n    }\n  }\n  /** @nocollapse */\n  /** @nocollapse */\n  /** @nocollapse */MatCarouselModule.ɵfac = function MatCarouselModule_Factory(t) {\n    return new (t || MatCarouselModule)();\n  };\n  MatCarouselModule.ɵmod = /** @pureOrBreakMyCode */i0.ɵɵdefineNgModule({\n    type: MatCarouselModule\n  });\n  MatCarouselModule.ɵinj = /** @pureOrBreakMyCode */i0.ɵɵdefineInjector({\n    imports: [CommonModule, MatButtonModule, MatIconModule, HammerModule]\n  });\n  return MatCarouselModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(MatCarouselModule, {\n    declarations: [MatCarouselComponent, MatCarouselSlideComponent],\n    imports: [CommonModule, MatButtonModule, MatIconModule, HammerModule],\n    exports: [MatCarouselComponent, MatCarouselSlideComponent]\n  });\n})();\n\n/*\n * Public API Surface of mat-carousel\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCarouselComponent, MatCarouselHammerConfig, MatCarouselModule, MatCarouselSlideComponent };\n//# sourceMappingURL=ng-mat-carousel.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}